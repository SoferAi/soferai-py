# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from .types.health_response import HealthResponse


class HealthClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_health(self, *, request_options: RequestOptions | None = None) -> HealthResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HealthResponse

        Examples
        --------
        from soferai import SoferAI

        client = SoferAI(
            api_key="YOUR_API_KEY",
        )
        client.health.get_health()
        """
        response = self._client_wrapper.httpx_client.request(
            "v1/health/",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= response.status_code < 300:
                return typing.cast(
                    HealthResponse,
                    parse_obj_as(
                        type_=HealthResponse,  # type: ignore
                        object_=response.json(),
                    ),
                )
            response_json = response.json()
        except JSONDecodeError:
            raise ApiError(status_code=response.status_code, body=response.text)
        raise ApiError(status_code=response.status_code, body=response_json)


class AsyncHealthClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_health(self, *, request_options: RequestOptions | None = None) -> HealthResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HealthResponse

        Examples
        --------
        import asyncio

        from soferai import AsyncSoferAI

        client = AsyncSoferAI(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.health.get_health()


        asyncio.run(main())
        """
        response = await self._client_wrapper.httpx_client.request(
            "v1/health/",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= response.status_code < 300:
                return typing.cast(
                    HealthResponse,
                    parse_obj_as(
                        type_=HealthResponse,  # type: ignore
                        object_=response.json(),
                    ),
                )
            response_json = response.json()
        except JSONDecodeError:
            raise ApiError(status_code=response.status_code, body=response.text)
        raise ApiError(status_code=response.status_code, body=response_json)
