# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
from ...transcribe.types.timestamp import Timestamp
import pydantic
from .starting_phrase_topic import StartingPhraseTopic


class AlignStartingPhrasesRequest(UniversalBaseModel):
    transcript_words: typing.List[Timestamp] = pydantic.Field()
    """
    List of word-level timestamps for the transcript
    """

    topics: typing.List[StartingPhraseTopic] = pydantic.Field()
    """
    List of topics with their expected starting phrases
    """

    monotone: typing.Optional[bool] = pydantic.Field(default=None)
    """
    If true, each topic is searched after the previous topic's start (with a small backoff)
    """

    conclusion_bias: typing.Optional[bool] = pydantic.Field(default=None)
    """
    If true and a title includes the word "conclusion", search in the last third of the audio
    """

    model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
