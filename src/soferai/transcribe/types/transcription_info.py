# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from .transcription_id import TranscriptionId
import pydantic
import datetime as dt
from .language import Language
import typing
from .letters_language import LettersLanguage
from .status import Status


class TranscriptionInfo(UniversalBaseModel):
    id: TranscriptionId = pydantic.Field()
    """
    ID of the transcription
    """

    title: str = pydantic.Field()
    """
    Title of the transcription
    """

    created_at: dt.datetime = pydantic.Field()
    """
    When the transcription was created
    """

    primary_language: Language = pydantic.Field()
    """
    Primary language of the audio content
    """

    hebrew_word_format: typing.List[LettersLanguage] = pydantic.Field()
    """
    Specifies how Hebrew words should be transcribed when the primary language is English. - If you want Hebrew words in Hebrew letters, include "he". - If you want Hebrew words transliterated into English letters, include "en". - If you include both "he" and "en", you will receive both versions back-to-back for each Hebrew word. Transliterated Hebrew words will be surrounded by <i> tags in the text.
    """

    num_speakers: int = pydantic.Field()
    """
    Number of speakers in the audio
    """

    status: Status = pydantic.Field()
    """
    Current status of the transcription
    """

    duration: float = pydantic.Field()
    """
    Duration of the audio in seconds
    """

    model: typing.Optional[str] = pydantic.Field(default=None)
    """
    Model used for the transcription
    """

    model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
